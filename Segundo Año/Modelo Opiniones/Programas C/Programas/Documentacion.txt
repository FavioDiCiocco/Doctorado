Cada una de las carpetas contiene archivos de C que usé para correr el
modelo en alguna fase del trabajo. Acá voy a ir anotando qué es lo que
se suponía que hiciera el código en esa fase.


.)Homofilia_estatica:
---------------------

Pablo se conoció con una gente de España y descubrió que estaban trabajando en un modelo de
Baumann unidimensional en el cuál integraban la homofilia entre agentes como un peso en los
enlaces. Eso les permitía observar estados ideológicos, estados de consenso y de radicalización.
Lo que nosotros estamos haciendo entonces es tomar este modelo con estos pesos y simular para
el caso 1D cosa de ver que nos de lo mismo que a ellos y después hicimos simulaciones 2D que
es lo que ellos no tenían.
 Este modelo tiene 1000 agentes, toma alfa=1, agrega el parámetro beta para graduar la homofilia
y barre en Beta y Cos(delta).
 Para el caso 1D armé una carpeta, 1D, en la que guardo los datos del modelo. Lo que hice fue
simular unos puntos particulares para ver que observo al igual que en el paper que nos pasaron
que el sistema converge a estados de polarización, radicalización y consenso neutro.
 Para el caso 2D tuve que implementar una nueva función que calcule las distancias de los vectores
en el espacio no ortogonal. Eso era necesario para poder calcular los pesos homofílicos entre agentes.
Actualmente tengo una sola forma de calcular esa distancia, pero hablando con la gente de España en
realidad me propusieron otras ideas de qué hacer, así que voy a tener que considerar cómo agregar
esas modificaciones y guardar esos datos en carpetas nuevas. Creo que lo mejor va a ser separar
en distintas etapas.

.)Tangente_diferenciada:
---------------------

Al calcular el efecto de las opiniones de los vecinos, en esta etapa voy a considerar sólo la opinión
del vecino en el tópico considerado. Por tanto, voy a descartar el valor de Cos(delta) en la tanh.
Pensé que iba a ser poner una matriz de superposición que sea la identidad, pero me doy cuenta que no
es tan simple, porque si hago eso, me jodo el cálculo de los pesos w_ij. Creo que tengo que actuar
directamente sobre la función dinámica.
 Este modelo lo apliqué a redes con 1000 agentes. En principio hice simplemente unas simulaciones
rápidas en Oporto, me encargué de armar datos para Beta = 0.1, 1 y 1.5, combinado con Cos(delta) = 0,
0.5 y 1. El kappa es 3, como siempre creo.

.)Distancias_independientes:
---------------------

La otra métrica que propusieron es modificar los pesos de forma tal que al calcularlos, considere las
distancias de los agentes en el tópico en cuestión. En este caso, no hay problema al definir el módulo
del vector porque es simplemente el módulo entre dos números escalares, no importa para nada el
tema del espacio no ortogonal.

.)Medidas_polarizacion:
-----------------------

El código que utilicé acá es muy similar al de Homofilia_estática. Es una evolución del modelo con
el peso homofílico en los enlaces, redes estáticas, grado medio de las redes igual a 10, tomando
Beta, Kappa, Cos(delta) y N como input, los datos que genero a la salida son los mismo que siempre,
con un archivo de Opiniones y otro de Testigos. Creo que al final el de Testigos lo cancelé en
esta tanda.
 La diferencia importante es que a partir de acá empecé a usar un dt=0.1, en vez del de 0.01 que estaba
usando antes.


.)NI_Homofilia:
----------------

Esta carpeta es temporal mientras veo qué pasó que el código ahora tarda más que antes. Este código
tiene las implementaciones que promedian los 100 pasos previos y los 100 actuales y compara eso
para saber si el sistema sigue evolucionando o si llegó a un estado estable. También tiene
la implementación de Generacion_Separacion. La matriz que contiene las separaciones entre agentes
y que me sirve para reducir la cantidad de veces que de forma redundante calculo esas separaciones.
 El motivo de decir que esta carpeta es temporal es porque estoy considerando reemplazar el código
de Medidas_polarizacion con este código, porque a fin de cuentas no es una etapa nueva en términos
de una modificación de la ecuación dinámica o un cambio en los datos guardados. Es una actualización
del código para hacerlo más rápido.

.)Testeo_implementaciones:
---------------------------

Este código reduce gran parte del código que es innecesaria cosa de permitirme hacer pruebas sencillas
sobre qué es lo que lo hace correr más rápido o más lento el código. Tiene la ecuación dinámica,
pero no busca evolucionar el sistema hasta llegar a un estado estable. Simplemente corre una cantidad
de tiempo fija, una cierta cantidad de simulaciones y listo.

.)Evolucion_temporal:
---------------------

Teníamos dudas del comportamiento del sistema en los casos en que la simulación se extendía hasta el
tiempo máximo, así que decidimos revisar en detalle el comportamiento de los agentes guardando los
valores de opinión de todos los agentes cada 100 pasos de iteración a lo largo de toda la simulación.
Usé valores particulares cosa de tener un sistema con beta bajo, uno con beta cercano a 1 y
otro con beta alto para observar distintas situaciones del modelo. Los casos considerados los tengo
anotados en el cuaderno, en los que anoté los betas, las iteraciones y las semillas consideradas.
Las redes que usé para armar estos datos son las redes de Erdos-Renyi que tenía armadas en la pc
de Algarve. La base de este código surge de NI_homofilia, pero adaptado para guardar los datos
de los testigos cada 100 pasos de iteración.

.) Actualización Opiniones:
---------------------------

Lo que hice es tomar el código de Medidas_polarización e implementar el uso de una lista de vecinos en
vez de una matriz de Adyacencia. También armé matrices para precalcular algunos datos previos
que surgen de funciones no lineales y que si los puedo precalcular reducen tiempo de simulación.
Todo esto lo hice en consonancia con el ejemplo de código que me pasó Hugo. Esto también implicó un
cambio en la construcción de las matrices de adyacencia, las cuales ahora se construyen indicando
los enlaces entre agentes, no escribiendo la matriz entera. Este código lo voy a usar para
realizar un barrido en el espacio Beta-Kappa y otro en el espacio Beta-Cos(delta). Si bien hubo algunos
problemas antes, decidí aprovechar y rehacer todas mis simulaciones, cosa de tener todas mis redes
construidas con grado medio=10.

.) Simulacion sin fin:
----------------------

Partiendo del código de Actualización de Opiniones, quería descubrir si ciertos estados observados son
metaestables o no. Para eso lo que puedo hacer es armar un código que tome la opinión final de un código
y continue simulando desde ahí. De esa manera, es básicamente lo mismo que retomar ese sistema,
porque mi código sólo hace uso de números random en la distribución inicial de opiniones, después
no usa números random para nada más. Así que este código se va a encargar de tomar datos previos y cargarlos
como input para la nueva simulación. Por el formato de simulación que esto va a tener, no creo que tenga
que preocuparme por el tema de usar el Instanciar con esto.