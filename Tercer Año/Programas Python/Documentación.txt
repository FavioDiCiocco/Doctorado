Archivos:
---------

.) Crear_redes.py: Esto me construye redes estáticas conexas de un dado grado medio y 
con N agentes. Me las guarda en la carpeta de MARE. Cada vez que necesito nuevas redes
o renovar las existentes, uso esto.

.) funciones_generales.py: Acá voy a ir guardando las nuevas funciones que vaya implementando.
Así a partir de ahora esto tiene todas las funciones, pero el funciones de cada Python de cada
carpeta tiene sólo las funciones necesarias. Eso va a hacer que recorrer la lista de funciones
sea mucho más fácil cada vez que quiera buscar funciones.


Prueba Tiempos:
---------------
Esta carpeta todavía no la use, la idea es hacer el testeo de cómo varía la fracción de estados
polarizados en función del tiempo de integración. El plan básico es revisar nuevamente cómo
hicieron ellos esto. Más que nada para ver cuántas simulaciones necesito. Además, necesito
una forma clara de diferenciar estados polarizados de los que no. Creo que la traza de la
covarianza igual demostró ser un buen medidor.
 Al final ya usé esta carpeta, la idea era armar para cada punto 100 simulaciones. Estas
simulaciones tenían que arrancar polarizadas y a partir de ahí, evolucionaban hasta dejar
de estar polarizadas o hasta llegar a un tiempo de 100*10^3. Lo que yo hice fue guardar
las opiniones del sistema cada 1000 unidades de tiempo, de forma que si el sistema
duraba hasta el final, entonces tendría 100 puntos temporales para graficar.
 Si llego a correr esto de nuevo, tomar en cuenta que había cosas malas en este código,
como que no registraba la cantidad de simulaciones realizadas sino que sólo guardaba estados
cada cierta cantidad de pasos fijos. Por lo que si el sistema terminaba en un punto intermedio,
no había forma de saber en cuál punto. Tampoco tenía forma de guardar el primer tiempo,
así que el código en realidad guardaba unos 99 estados, no 100 en el mejor caso.


Opinion actualizada:
--------------------
Estoy realizando dos barridos. Por un lado, un barrido de Beta-Cos(delta), por el otro un barrido de
Beta-Kappa. El primero se realiza con Beta entre [0,2] y Cos(delta) entre [0,1], mientras que el segundo
se realiza con Beta en la misma región y Kappa entre [0,20]. Sobre esto, estoy realizando mapas de colores
del espacio de parámetros usando la Entropía, Varianza y Covarianza para más o menos ver lo que ocurre con
el sistema, mientras que por otro lado implementé un algoritmo que identifica estados y lo estamos usando
para caracterizar el comportamiento del sistema en las distintas regiones.
 Actualmente, armé una carpeta llamada Revisión, la cuál tiene las simulaciones de un conjunto de estados,
los cuáles el programa reconoce como estados de polarización ideológica, pero difícilmente sean tales.


Func sign:
----------
Estábamos interesados en ver de caracterizar la curva que se produce en el espacio Beta-Kappa
que diferencia la región donde tengo sólo Consenso Radicalizado y la región en la que tengo
mezcla de estados. Hugo nos dijo que cuando lo revisaron, llegaron a la conclusión de que
era un efecto de saturación de la función de tanh. Así que una forma de ponerlo a prueba
es hacer un barrido en el espacio Beta-Kappa cambiando la función de tanh por una función
signo, que sea 1 o -1 en caso de que la función del vecino sea positiva o negativa.


Clasificador neuronal:
----------------------
Acá lo que tengo es una carpeta de Python. Pero creo que lo que ocurre es que en la pc
de la facultad tengo una segunda carpeta con gráficos de distribuciones. En realidad la 
mayor parte del código de esto lo tenía en un Google Colab que entrena una red neuronal.
Logré que se entrene la red, no la probé sobre su eficiencia en nada, así que básicamente
vi que el código corre y listo. Por ahora esto está en stand-by.


Probas Pol:
-----------
El objetivo era ver la probabilidad de polarización de una dimensión contra dos dimensiones.
Había mandado a armar las simulaciones, ahora me doy cuenta que no sé si hice algo con esto.
Qué bajón. Cuestión que los datos deberían estar en la pc de la facultad.


Distribuciones ANES:
--------------------
Esta carpeta contiene una carpeta para cada encuesta ANES, con la encuesta en formato .dta
En Python lo más importante son las funciones Analisis 2016 y Analisis 2020. Estas funciones
hacen las distribuciones de opiniones a lo largo de un eje y a lo largo de dos, para las
preguntas consideradas de cada encuesta. En la pc de la facultad puedo armar estos gráficos
usando Seaborn, pero en casa el seaborn no funciona y tengo que armar simulaciones con
matplotlib.


Comparacion datos:
------------------
El objetivo es comparar las distribuciones de ANES con las simulaciones del modelo. Para eso
tengo la carpeta de ANES_2020 y una carpeta con las simulaciones del espacio Zoom_Beta-Cosd.
Principalmente estoy armando gráficos de distancia JS promedio en el espacio de parámetros
para algunos conjuntos de pares de preguntas e intentando ajustar los valores de Beta y Cos(delta)
óptimos para tener el mínimo de distancia.

Barrido final:
--------------
Esta carpeta es distinta en los clusters y en la pc de la facultad. En los clusters tengo una carpeta
de Beta-Cosd donde van las simulaciones con 10000 agentes.
 En la pc de la facultad en cambio tengo 3 carpetas. La de Descarga tiene los archivos de 10000 agentes
que construí en la región de Beta [0,1] y Cos(delta) [0,0.14]. La de Beta-Cosd tiene esos mismos
archivos, pero reformateados para que tengan las distribuciones de opiniones. Y en configurations
tengo los archivos que Hugo me pasó.
 Eventualmente, para evitar confusiones de código, armé una carpeta Python_BCD para armar los gráficos
en el espacio Beta-Cosd y una carpeta Python_BK para los gráficos en el espacio Beta-Kappa. Sobre el
código del espacio Beta-Cosd, fui construyendo algunos diccionarios con el fin de trabajar cluster por
cluster. Esta parte del código podría retraerse y finalmente volver a la versión total.
