Cada una de las carpetas contiene archivos de C que usé para correr el
modelo en alguna fase del trabajo. Acá voy a ir anotando qué es lo que
se suponía que hiciera el código en esa fase.

.) PruebaMod:
-------------

En este código agregué coeficientes para considerar un campo externo y para
que el primer término de la ecuación dinámica tenga una intensidad variable.
Además modifique la asignación de opinones iniciales para que las opiniones
se distribuyan con probabilidad uniforme entre 0 y 5. Con esto estudié el
comportamiento del sistema para casos de baja controversialidad, alta
controversialidad, baja correlación y alta correlación. También agregué
que en los casos de Consenso el sistema primero se asegure de que la red
esté completamente conectada y después termine la simulación.

.) Transcritico:
----------------

Acá ya modifiqué la función dinámica, saqué todo lo referido a la tanh
y preparé los archivos para que en el nombre lleven registro del número
de agentes, la controversialidad, el cosdelta y el mu, que sería la 
intensidad con la cual los agentes se van al cero. De este código 
obtenía los datos de opiniones iniciales y finales, Varprom y los
datos de los testigos. Los datos armados los hice normalizando la
ecuación dinámica usando la Norm_máxima, que sería dividir por la máxima
sumatoria de opiniones que un agente podría obtener. En los casos de 
mu positivo todo daba bien, pero en los de mu negativo el sistema
divergía completamente.

.) Conjunto_pequeño:
--------------------

Aplico el modelo con el término cuadrático a un sistema con dos o tres
agentes para corroborar los resultados obtenidos de forma analítica.
El armado de los datos es idéntico al caso anterior, generando dos
archivos: Varprom y Testigos. Al código le agregué el uso de la
función sleep de forma que la separación temporal entre corridas
sea mayor a 1 segundo, para que cada corrida tenga una semilla
diferente al trabajar.

.) Trans_ln:
-------------

Aplico el modelo con el término logarítmico a un sistema con dos o tres
agentes para corroborar los resultados obtenidos de forma analítica.
El armado de los datos es idéntico al caso anterior, generando dos
archivos: Varprom y Testigos. Al código le agregué el uso de la
función sleep de forma que la separación temporal entre corridas
sea mayor a 1 segundo, para que cada corrida tenga una semilla
diferente al trabajar.

.) Modelo estocástico:
----------------------

Evoluciono la dinámica del sistema considerando interacciones entre
pares de agentes de forma estocástica. Para esto recorro todos los
agentes de la red y para cada uno elijo un segundo agente del conjunto
total de agentes y de forma equiprobable. En este código evoluciono
la ecuación dinámica con el término logarítmico. De acá genero
dos archivos, el de Opiniones (que guarda opiniones iniciales,
varprom, finales y semilla) y el de Testigos (que guarda las opiniones
de los primeros 10 agentes de principio a fin de la simulación.
En principio el código está para correrse, pero decidí dejar esto
para más tarde.

.) Din_log:
-----------

Tomo el modelo con el término logarítimico y lo aplico ahora a un sistema
con N agentes. A diferencia de trans_ln el logaritmo tiene base 10 y 
la sumatoria está dentro del logaritmo. El armado de los datos consiste
en dos archivos, uno de Testigos y otro de Opiniones. El de Opiniones tiene
el estado inicial del sistema, el varprom, el estado final del sistema,
la red de adyacencia y la semilla de la simulación. En cambio Testigos lleva
las opiniones de los primeros seis agentes a lo largo de toda la simulación.
Armé varios datos de esto que están en la pc de Oporto, pero al final nunca
los usé.

.) Logistica_1D:
----------------

Dejamos atrás el modelo logarítmico, ahora el término final de la ecuación
dinámica tiene una función logística. La idea del modelo ahora es arrancar
de cero, redes fijas, la menor cantidad de parámetros posibles y forzando
al sistema a mantenerse en la región [0,1]. Para eso el segundo término
se normaliza por el grado del agente. Además arrancamos probando esto para
dos agentes y después de eso lo mandamos para varios. Como el nombre indica,
obviamente todo esto corre con un sólo tópico.
  El objetivo de este código es ver que tal funca este modelo, explorar su
comportamiento en el espacio de fases y ganar intuición sobre el mismo.
  Es importante notar que borré muchos parámetros viejos y cosas no utilizadas
en este modelo que estaba cargando de modelos viejos. Eso es porque quería
simplificar el código y emprolijarlo. Los parámetros importantes en este
modelo son el alfa y el umbral, que eventualmente empecé a llamar Chi.
Espero no cambiar de idea pronto y armar un quilombo. Este código suelta
archivos de "Opiniones" y "Testigos", como la mayoría. Con esos datos
me armé funciones que grafican mapas de colores e histogramas. Esas funciones
están ahora colocadas en un archivo python de funciones, que va aparte del 
archivo que grafica. Eso está muy bueno, la verdad que me hace todo mucho
más fácil de correr y de ir compartimentando en distintas funciones particulares.
Soy un boludo por no hacer esto antes.

.) Saturacion_1D:
-----------------

Al modelo de Logistica_1D le agregué un nuevo término, el término de Saturación.
Este término lo saqué del paper de Accelerating Dynamics of Collective Attention.
La idea es que es un término no lineal que se multiplica por el interés actual
del agente y que se "integra" tomando en cuenta los valores previos de interés
del agente. Es un término distinto para cada agente, y lo sería también para
cada tópico si tuviera diversos tópicos. Aunque decir que se integra es un
poco una mentira, ya que en realidad lo que se hace es evolucionar el término
con una ecuación dinámica. Claramente es mejor esto, porque la integración
sería un bardo, en especial considerando que necesitaría en algún lugar guardar
la info de los pasos previos.
 La idea del término de saturación es que los agentes no se queden en un máximo
de interés eternamente, sino que eventualmente decaigan.
 Para este modelo vale aclarar que modifiqué la función de Runge-Kutta y le cambié
los nombres a las funciones dinámicas, comprendiendo que ahroa tengo más de una
ecuación dinámica y entonces necesitaba armar punteros para ambas. Espero que el
cambio sobre la función de RK4 haya sido para mejor, pero no estoy seguro que
realmente la función ahora sea más general que antes. Quizás después vuelva a
lo que tenía antes. Sólo el tiempo dirá.

.) Variacion_olvido:
--------------------

Quería ver cómo cambiaban los valores máximos a los que tendían los agentes en
función del valor de olvido. Para eso utilicé la ecuación dinámica con el término
de saturación y el logístico, fijé alfa en 7 y chi en 2 y varié los valores de
olvido entre 0.001 y 1 Para eso armé un paso bastante particular, pero los detalles
no son importantes, simplemente recorrí bastantes valores en el camino cosa de 
que quede una curva razonable. Luego cambié los inputs de la función, obviamente
cambié el Instanciar.sh y cambié los nombres de salida de los archivos de forma
que se registren según cómo varían los valores de Lambda y no los valores de
alfa y chi que están fijos.

.) Ola_interes:
---------------

La idea de este código era estudiar el caso de un agente con un alto valor de interés
en una red con todos los agentes con un interés nulo. Para hacer esto, necesitaba estudiar
la variación en el tiempo de varios agentes y mi problema es que si quería guardar las
opiniones de todos los agentes, el espacio de memoria necesario para guardar todos
los datos se hacía insosteniblemente grande. Por eso estuve trabajando en armar
funciones en C que identifiquen a los agentes según su distancia al agente inicial
con un alto interés. La idea es que la mayor variación en el comportamiento se
observaría según la distancia. Mi plan era armar un gráfico de interés en función
del tiempo con una curva para cada distancia. Mi intuición es que lo que vería
sería que cada curva crece al 1 a un tiempo que crece con la distancia.
 Este código tenía como parámetros Alfa y el valor de opinión inicial, probablemente.
Admito que no terminé de decidirme, básicamente porque no terminé de armar el código.
 De paso, con este código la idea era retornar al uso de la función logística y el
término lineal, no pretendía utilizar el término de saturación.

.) Cambios_parametros:
----------------------

En esta etapa la idea es reducir los parámetros alfa y chi a un sólo parámetro, ya que el
comportamiento del sistema en función de estos dos valores era lineal, y por encima de
cierto valor el sistema convergía al punto fijo máximo y por debajo convergía al punto
fijo mínimo. Ese nuevo parámetro lo renombré epsilon, en donde estaba el alfa la idea 
es colocar un valor mayor a 4 de forma de que el sistema tienda a los puntos fijos extremos
y además epsilon debería ser menor a la mitad del valor que ponga donde iba el alfa.
 Por otro lado agrego un párametro al segundo término, el kappa, el cual modula la presión
social. De esta manera la convergencia del sistema a los valores altos de interés no depende
enteramente del epsilon.
 Armo dos carpetas, 1D y 2D para diferenciar las fases de esta etapa en las que trabajé
con un solo tópico y la que trabajé con dos.
 Para el código de la carpeta 2D, utilicé alfa = 4 y kappa = 1 a la hora de armar mis datos.
Los parámetros que varié son Epsilon y Cosdelta. Eso fue originalmente, después lo que hice
fue usar este código para variar los valores de Kappa junto con cosdelta, fijando epsilon = 2,5.
 Saturación toma el código de 2D y le agrega el término de saturación a la ecuación dinámica.
Esto implica también el descomentar las funciones en el main y en avanzar. Lo voy a usar tanto
para el caso en el que agrego el término lineal como en el caso en que lo saco. Ambos casos se
diferencian poniendo un (-1+...) en la ecuación dinámica, es una línea de código nomás.